/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.rest.client.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Project feature.
 */
@ApiModel(description = "Project feature.")
@JsonPropertyOrder({
  ProjectFeature.JSON_PROPERTY_PROJECT_ID,
  ProjectFeature.JSON_PROPERTY_STATE,
  ProjectFeature.JSON_PROPERTY_TOGGLE_LOCKED,
  ProjectFeature.JSON_PROPERTY_FEATURE,
  ProjectFeature.JSON_PROPERTY_FEATURE_CATEGORY,
  ProjectFeature.JSON_PROPERTY_PREREQUISITES,
  ProjectFeature.JSON_PROPERTY_LOCALISED_NAME,
  ProjectFeature.JSON_PROPERTY_LOCALISED_DESCRIPTION,
  ProjectFeature.JSON_PROPERTY_IMAGE_URI
})
@JsonTypeName("ProjectFeature")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-16T21:45:04.339922+09:00[Asia/Seoul]")
public class ProjectFeature {
  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private Long projectId;

  /**
   * State of the feature.
   */
  public enum StateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    COMING_SOON("COMING_SOON");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_TOGGLE_LOCKED = "toggleLocked";
  private Boolean toggleLocked;

  public static final String JSON_PROPERTY_FEATURE = "feature";
  private String feature;

  public static final String JSON_PROPERTY_FEATURE_CATEGORY = "featureCategory";
  private String featureCategory;

  public static final String JSON_PROPERTY_PREREQUISITES = "prerequisites";
  private List<String> prerequisites = null;

  public static final String JSON_PROPERTY_LOCALISED_NAME = "localisedName";
  private String localisedName;

  public static final String JSON_PROPERTY_LOCALISED_DESCRIPTION = "localisedDescription";
  private String localisedDescription;

  public static final String JSON_PROPERTY_IMAGE_URI = "imageUri";
  private String imageUri;


  public ProjectFeature projectId(Long projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Project ID.
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Project ID.")
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProjectId() {
    return projectId;
  }


  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public ProjectFeature state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * State of the feature.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State of the feature.")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public ProjectFeature toggleLocked(Boolean toggleLocked) {
    
    this.toggleLocked = toggleLocked;
    return this;
  }

   /**
   * Determines whether a feature can be toggled or not.
   * @return toggleLocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether a feature can be toggled or not.")
  @JsonProperty(JSON_PROPERTY_TOGGLE_LOCKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getToggleLocked() {
    return toggleLocked;
  }


  public void setToggleLocked(Boolean toggleLocked) {
    this.toggleLocked = toggleLocked;
  }


  public ProjectFeature feature(String feature) {
    
    this.feature = feature;
    return this;
  }

   /**
   * Feature&#39;s key.
   * @return feature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Feature's key.")
  @JsonProperty(JSON_PROPERTY_FEATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeature() {
    return feature;
  }


  public void setFeature(String feature) {
    this.feature = feature;
  }


  public ProjectFeature featureCategory(String featureCategory) {
    
    this.featureCategory = featureCategory;
    return this;
  }

   /**
   * Feature&#39;s category.
   * @return featureCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Feature's category.")
  @JsonProperty(JSON_PROPERTY_FEATURE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeatureCategory() {
    return featureCategory;
  }


  public void setFeatureCategory(String featureCategory) {
    this.featureCategory = featureCategory;
  }


  public ProjectFeature prerequisites(List<String> prerequisites) {
    
    this.prerequisites = prerequisites;
    return this;
  }

  public ProjectFeature addPrerequisitesItem(String prerequisitesItem) {
    if (this.prerequisites == null) {
      this.prerequisites = new ArrayList<>();
    }
    this.prerequisites.add(prerequisitesItem);
    return this;
  }

   /**
   * List of the keys of features required as prerequisites to enable this feature.
   * @return prerequisites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the keys of features required as prerequisites to enable this feature.")
  @JsonProperty(JSON_PROPERTY_PREREQUISITES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPrerequisites() {
    return prerequisites;
  }


  public void setPrerequisites(List<String> prerequisites) {
    this.prerequisites = prerequisites;
  }


  public ProjectFeature localisedName(String localisedName) {
    
    this.localisedName = localisedName;
    return this;
  }

   /**
   * Name to display for this feature, localised.
   * @return localisedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name to display for this feature, localised.")
  @JsonProperty(JSON_PROPERTY_LOCALISED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalisedName() {
    return localisedName;
  }


  public void setLocalisedName(String localisedName) {
    this.localisedName = localisedName;
  }


  public ProjectFeature localisedDescription(String localisedDescription) {
    
    this.localisedDescription = localisedDescription;
    return this;
  }

   /**
   * Description to display for this feature, localised.
   * @return localisedDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description to display for this feature, localised.")
  @JsonProperty(JSON_PROPERTY_LOCALISED_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocalisedDescription() {
    return localisedDescription;
  }


  public void setLocalisedDescription(String localisedDescription) {
    this.localisedDescription = localisedDescription;
  }


  public ProjectFeature imageUri(String imageUri) {
    
    this.imageUri = imageUri;
    return this;
  }

   /**
   * Uri to the image that should be used to display this feature.
   * @return imageUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Uri to the image that should be used to display this feature.")
  @JsonProperty(JSON_PROPERTY_IMAGE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImageUri() {
    return imageUri;
  }


  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeature projectFeature = (ProjectFeature) o;
    return Objects.equals(this.projectId, projectFeature.projectId) &&
        Objects.equals(this.state, projectFeature.state) &&
        Objects.equals(this.toggleLocked, projectFeature.toggleLocked) &&
        Objects.equals(this.feature, projectFeature.feature) &&
        Objects.equals(this.featureCategory, projectFeature.featureCategory) &&
        Objects.equals(this.prerequisites, projectFeature.prerequisites) &&
        Objects.equals(this.localisedName, projectFeature.localisedName) &&
        Objects.equals(this.localisedDescription, projectFeature.localisedDescription) &&
        Objects.equals(this.imageUri, projectFeature.imageUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, state, toggleLocked, feature, featureCategory, prerequisites, localisedName, localisedDescription, imageUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeature {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    toggleLocked: ").append(toIndentedString(toggleLocked)).append("\n");
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    featureCategory: ").append(toIndentedString(featureCategory)).append("\n");
    sb.append("    prerequisites: ").append(toIndentedString(prerequisites)).append("\n");
    sb.append("    localisedName: ").append(toIndentedString(localisedName)).append("\n");
    sb.append("    localisedDescription: ").append(toIndentedString(localisedDescription)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

