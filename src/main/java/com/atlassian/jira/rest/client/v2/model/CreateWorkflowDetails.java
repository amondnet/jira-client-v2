/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.atlassian.jira.rest.client.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.atlassian.jira.rest.client.v2.model.CrateWorkflowStatusDetails;
import com.atlassian.jira.rest.client.v2.model.CreateWorkflowTransitionDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The details of a workflow.
 */
@ApiModel(description = "The details of a workflow.")
@JsonPropertyOrder({
  CreateWorkflowDetails.JSON_PROPERTY_NAME,
  CreateWorkflowDetails.JSON_PROPERTY_DESCRIPTION,
  CreateWorkflowDetails.JSON_PROPERTY_TRANSITIONS,
  CreateWorkflowDetails.JSON_PROPERTY_STATUSES
})
@JsonTypeName("CreateWorkflowDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-16T21:45:04.339922+09:00[Asia/Seoul]")
public class CreateWorkflowDetails {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TRANSITIONS = "transitions";
  private List<CreateWorkflowTransitionDetails> transitions = new ArrayList<>();

  public static final String JSON_PROPERTY_STATUSES = "statuses";
  private Set<CrateWorkflowStatusDetails> statuses = new LinkedHashSet<>();


  public CreateWorkflowDetails name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CreateWorkflowDetails description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the workflow. The maximum length is 1000 characters.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the workflow. The maximum length is 1000 characters.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateWorkflowDetails transitions(List<CreateWorkflowTransitionDetails> transitions) {
    
    this.transitions = transitions;
    return this;
  }

  public CreateWorkflowDetails addTransitionsItem(CreateWorkflowTransitionDetails transitionsItem) {
    this.transitions.add(transitionsItem);
    return this;
  }

   /**
   * The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique &#39;to&#39; status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a &#39;from&#39; status on *initial* and *global* transitions.  *  have a &#39;from&#39; status on *directed* transitions.  All the transition statuses must be included in &#x60;statuses&#x60;.
   * @return transitions
  **/
  @ApiModelProperty(required = true, value = "The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.")
  @JsonProperty(JSON_PROPERTY_TRANSITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CreateWorkflowTransitionDetails> getTransitions() {
    return transitions;
  }


  public void setTransitions(List<CreateWorkflowTransitionDetails> transitions) {
    this.transitions = transitions;
  }


  public CreateWorkflowDetails statuses(Set<CrateWorkflowStatusDetails> statuses) {
    
    this.statuses = statuses;
    return this;
  }

  public CreateWorkflowDetails addStatusesItem(CrateWorkflowStatusDetails statusesItem) {
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
   * @return statuses
  **/
  @ApiModelProperty(required = true, value = "The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.")
  @JsonProperty(JSON_PROPERTY_STATUSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<CrateWorkflowStatusDetails> getStatuses() {
    return statuses;
  }


  public void setStatuses(Set<CrateWorkflowStatusDetails> statuses) {
    this.statuses = statuses;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkflowDetails createWorkflowDetails = (CreateWorkflowDetails) o;
    return Objects.equals(this.name, createWorkflowDetails.name) &&
        Objects.equals(this.description, createWorkflowDetails.description) &&
        Objects.equals(this.transitions, createWorkflowDetails.transitions) &&
        Objects.equals(this.statuses, createWorkflowDetails.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, transitions, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkflowDetails {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

